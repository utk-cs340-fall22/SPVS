41a371f6c6 (SaishMalluri 2022-10-13 01:53:17 -0400   1) #include <iostream>
41a371f6c6 (SaishMalluri 2022-10-13 01:53:17 -0400   2) #include <string>
41a371f6c6 (SaishMalluri 2022-10-13 01:53:17 -0400   3) #include <vector>
41a371f6c6 (SaishMalluri 2022-10-13 01:53:17 -0400   4) #include <fstream>
41a371f6c6 (SaishMalluri 2022-10-13 01:53:17 -0400   5) #include <SFML/Network.hpp>
41a371f6c6 (SaishMalluri 2022-10-13 01:53:17 -0400   6) #include <sstream>
41a371f6c6 (SaishMalluri 2022-10-13 01:53:17 -0400   7) 
41a371f6c6 (SaishMalluri 2022-10-13 01:53:17 -0400   8) using namespace std;
41a371f6c6 (SaishMalluri 2022-10-13 01:53:17 -0400   9) 
41a371f6c6 (SaishMalluri 2022-10-13 01:53:17 -0400  10) static bool port_is_open(const string& address, int port)
41a371f6c6 (SaishMalluri 2022-10-13 01:53:17 -0400  11) {
41a371f6c6 (SaishMalluri 2022-10-13 01:53:17 -0400  12)     return (sf::TcpSocket().connect(sf::IpAddress::resolve(address).value(), port) == sf::Socket::Status::Done);
41a371f6c6 (SaishMalluri 2022-10-13 01:53:17 -0400  13) }
41a371f6c6 (SaishMalluri 2022-10-13 01:53:17 -0400  14) 
41a371f6c6 (SaishMalluri 2022-10-13 01:53:17 -0400  15) void scan(const string& address, vector<int>ports)
41a371f6c6 (SaishMalluri 2022-10-13 01:53:17 -0400  16) {
41a371f6c6 (SaishMalluri 2022-10-13 01:53:17 -0400  17)     //Scanning each port and seeing whether it is open or closed
41a371f6c6 (SaishMalluri 2022-10-13 01:53:17 -0400  18)     for(int i=0; i<ports.size(); i++)
41a371f6c6 (SaishMalluri 2022-10-13 01:53:17 -0400  19)     {
f28eaddf3b (SaishMalluri 2022-10-13 17:29:04 -0400  20)         cout << "Scanning " << address << "...\n" << "Port " << ports[i] << " : " << endl;
31f1e5aed8 (SaishMalluri 2022-10-27 23:01:41 -0400  21)         
31f1e5aed8 (SaishMalluri 2022-10-27 23:01:41 -0400  22)         //Commonly used top ports
31f1e5aed8 (SaishMalluri 2022-10-27 23:01:41 -0400  23)         if(ports[i]==20 || ports[i]==21)
31f1e5aed8 (SaishMalluri 2022-10-27 23:01:41 -0400  24)         {
31f1e5aed8 (SaishMalluri 2022-10-27 23:01:41 -0400  25)             cout << "Common port: FTP port" << endl;
31f1e5aed8 (SaishMalluri 2022-10-27 23:01:41 -0400  26)         }
31f1e5aed8 (SaishMalluri 2022-10-27 23:01:41 -0400  27) 
31f1e5aed8 (SaishMalluri 2022-10-27 23:01:41 -0400  28)         else if(ports[i]==22)
31f1e5aed8 (SaishMalluri 2022-10-27 23:01:41 -0400  29)         {
31f1e5aed8 (SaishMalluri 2022-10-27 23:01:41 -0400  30)             cout << "Common port: SSH port" << endl;
31f1e5aed8 (SaishMalluri 2022-10-27 23:01:41 -0400  31)         }
31f1e5aed8 (SaishMalluri 2022-10-27 23:01:41 -0400  32) 
31f1e5aed8 (SaishMalluri 2022-10-27 23:01:41 -0400  33)         else if(ports[i]==25)
31f1e5aed8 (SaishMalluri 2022-10-27 23:01:41 -0400  34)         {
31f1e5aed8 (SaishMalluri 2022-10-27 23:01:41 -0400  35)             cout << "Common port: SMTP port" << endl;
31f1e5aed8 (SaishMalluri 2022-10-27 23:01:41 -0400  36)         }
31f1e5aed8 (SaishMalluri 2022-10-27 23:01:41 -0400  37) 
31f1e5aed8 (SaishMalluri 2022-10-27 23:01:41 -0400  38)         else if(ports[i]==53)
31f1e5aed8 (SaishMalluri 2022-10-27 23:01:41 -0400  39)         {
31f1e5aed8 (SaishMalluri 2022-10-27 23:01:41 -0400  40)             cout << "Common port: DNS port" << endl;
31f1e5aed8 (SaishMalluri 2022-10-27 23:01:41 -0400  41)         }
31f1e5aed8 (SaishMalluri 2022-10-27 23:01:41 -0400  42) 
31f1e5aed8 (SaishMalluri 2022-10-27 23:01:41 -0400  43)         else if(ports[i]==80)
31f1e5aed8 (SaishMalluri 2022-10-27 23:01:41 -0400  44)         {
31f1e5aed8 (SaishMalluri 2022-10-27 23:01:41 -0400  45)             cout << "Common port: HTTP port" << endl;
31f1e5aed8 (SaishMalluri 2022-10-27 23:01:41 -0400  46)         }
31f1e5aed8 (SaishMalluri 2022-10-27 23:01:41 -0400  47) 
31f1e5aed8 (SaishMalluri 2022-10-27 23:01:41 -0400  48)         else if(ports[i]==123)
31f1e5aed8 (SaishMalluri 2022-10-27 23:01:41 -0400  49)         {
31f1e5aed8 (SaishMalluri 2022-10-27 23:01:41 -0400  50)             cout << "Common port: NTP port" << endl;
31f1e5aed8 (SaishMalluri 2022-10-27 23:01:41 -0400  51)         }
31f1e5aed8 (SaishMalluri 2022-10-27 23:01:41 -0400  52) 
31f1e5aed8 (SaishMalluri 2022-10-27 23:01:41 -0400  53)         else if(ports[i]==179)
31f1e5aed8 (SaishMalluri 2022-10-27 23:01:41 -0400  54)         {
31f1e5aed8 (SaishMalluri 2022-10-27 23:01:41 -0400  55)            cout << "Common port: BGP port" << endl; 
31f1e5aed8 (SaishMalluri 2022-10-27 23:01:41 -0400  56)         }
31f1e5aed8 (SaishMalluri 2022-10-27 23:01:41 -0400  57) 
31f1e5aed8 (SaishMalluri 2022-10-27 23:01:41 -0400  58)         else if(ports[i]==443)
31f1e5aed8 (SaishMalluri 2022-10-27 23:01:41 -0400  59)         {
31f1e5aed8 (SaishMalluri 2022-10-27 23:01:41 -0400  60)             cout << "Common port: HTTPS port" << endl;
31f1e5aed8 (SaishMalluri 2022-10-27 23:01:41 -0400  61)         }
31f1e5aed8 (SaishMalluri 2022-10-27 23:01:41 -0400  62) 
31f1e5aed8 (SaishMalluri 2022-10-27 23:01:41 -0400  63)         else if(ports[i]==500)
31f1e5aed8 (SaishMalluri 2022-10-27 23:01:41 -0400  64)         {
31f1e5aed8 (SaishMalluri 2022-10-27 23:01:41 -0400  65)             cout << "Common port: ISAKMP port" << endl;
31f1e5aed8 (SaishMalluri 2022-10-27 23:01:41 -0400  66)         }
31f1e5aed8 (SaishMalluri 2022-10-27 23:01:41 -0400  67) 
31f1e5aed8 (SaishMalluri 2022-10-27 23:01:41 -0400  68)         else if(ports[i]==3389)
31f1e5aed8 (SaishMalluri 2022-10-27 23:01:41 -0400  69)         {
31f1e5aed8 (SaishMalluri 2022-10-27 23:01:41 -0400  70)             cout << "Common port: RDP port" << endl;
31f1e5aed8 (SaishMalluri 2022-10-27 23:01:41 -0400  71)         }
31f1e5aed8 (SaishMalluri 2022-10-27 23:01:41 -0400  72) 
41a371f6c6 (SaishMalluri 2022-10-13 01:53:17 -0400  73)         if (port_is_open(address, i))
41a371f6c6 (SaishMalluri 2022-10-13 01:53:17 -0400  74)         {
41a371f6c6 (SaishMalluri 2022-10-13 01:53:17 -0400  75)             cout << "OPEN" << endl;
41a371f6c6 (SaishMalluri 2022-10-13 01:53:17 -0400  76)         }
41a371f6c6 (SaishMalluri 2022-10-13 01:53:17 -0400  77) 
41a371f6c6 (SaishMalluri 2022-10-13 01:53:17 -0400  78)         else
41a371f6c6 (SaishMalluri 2022-10-13 01:53:17 -0400  79)         {
41a371f6c6 (SaishMalluri 2022-10-13 01:53:17 -0400  80)             cout << "CLOSED" << endl;
41a371f6c6 (SaishMalluri 2022-10-13 01:53:17 -0400  81)         }
31f1e5aed8 (SaishMalluri 2022-10-27 23:01:41 -0400  82) 
31f1e5aed8 (SaishMalluri 2022-10-27 23:01:41 -0400  83)         cout << endl;
41a371f6c6 (SaishMalluri 2022-10-13 01:53:17 -0400  84)     }
41a371f6c6 (SaishMalluri 2022-10-13 01:53:17 -0400  85) }
41a371f6c6 (SaishMalluri 2022-10-13 01:53:17 -0400  86) 
41a371f6c6 (SaishMalluri 2022-10-13 01:53:17 -0400  87) int main(int argc, char ** argv)
41a371f6c6 (SaishMalluri 2022-10-13 01:53:17 -0400  88) {
41a371f6c6 (SaishMalluri 2022-10-13 01:53:17 -0400  89)     vector<int> ports;
41a371f6c6 (SaishMalluri 2022-10-13 01:53:17 -0400  90)     int port;
f28eaddf3b (SaishMalluri 2022-10-13 17:29:04 -0400  91)     string address;
31f1e5aed8 (SaishMalluri 2022-10-27 23:01:41 -0400  92)     bool rangeScan=false;
31f1e5aed8 (SaishMalluri 2022-10-27 23:01:41 -0400  93)     string s;
31f1e5aed8 (SaishMalluri 2022-10-27 23:01:41 -0400  94)     int rangeOne;
31f1e5aed8 (SaishMalluri 2022-10-27 23:01:41 -0400  95)     int rangeTwo;
41a371f6c6 (SaishMalluri 2022-10-13 01:53:17 -0400  96) 
f28eaddf3b (SaishMalluri 2022-10-13 17:29:04 -0400  97)     //Address that is used for scanning
f28eaddf3b (SaishMalluri 2022-10-13 17:29:04 -0400  98)     cout << "Please enter address: ";
f28eaddf3b (SaishMalluri 2022-10-13 17:29:04 -0400  99)     getline(cin,address);
f28eaddf3b (SaishMalluri 2022-10-13 17:29:04 -0400 100)     cout << endl;
41a371f6c6 (SaishMalluri 2022-10-13 01:53:17 -0400 101) 
31f1e5aed8 (SaishMalluri 2022-10-27 23:01:41 -0400 102)     //Asking user for scanning range of ports
31f1e5aed8 (SaishMalluri 2022-10-27 23:01:41 -0400 103)     cout << "Would you like to scan a range of ports?" << endl;
31f1e5aed8 (SaishMalluri 2022-10-27 23:01:41 -0400 104)     cin >> s;
31f1e5aed8 (SaishMalluri 2022-10-27 23:01:41 -0400 105)     cout << endl;
31f1e5aed8 (SaishMalluri 2022-10-27 23:01:41 -0400 106)    
31f1e5aed8 (SaishMalluri 2022-10-27 23:01:41 -0400 107)     if(s=="Yes" || s=="yes")
31f1e5aed8 (SaishMalluri 2022-10-27 23:01:41 -0400 108)     {
31f1e5aed8 (SaishMalluri 2022-10-27 23:01:41 -0400 109)         rangeScan=true;
31f1e5aed8 (SaishMalluri 2022-10-27 23:01:41 -0400 110)     }
31f1e5aed8 (SaishMalluri 2022-10-27 23:01:41 -0400 111)     
31f1e5aed8 (SaishMalluri 2022-10-27 23:01:41 -0400 112)     //Scanning range of ports
31f1e5aed8 (SaishMalluri 2022-10-27 23:01:41 -0400 113)     if(rangeScan)
31f1e5aed8 (SaishMalluri 2022-10-27 23:01:41 -0400 114)     {
31f1e5aed8 (SaishMalluri 2022-10-27 23:01:41 -0400 115)         cout << "Please enter a range of ports that you would like to scan (ex: 20 40): ";
31f1e5aed8 (SaishMalluri 2022-10-27 23:01:41 -0400 116)         cin >> rangeOne >> rangeTwo;
31f1e5aed8 (SaishMalluri 2022-10-27 23:01:41 -0400 117)         cout << endl;
31f1e5aed8 (SaishMalluri 2022-10-27 23:01:41 -0400 118)         for(int i=rangeOne; i<=rangeTwo; i++)
31f1e5aed8 (SaishMalluri 2022-10-27 23:01:41 -0400 119)         {
31f1e5aed8 (SaishMalluri 2022-10-27 23:01:41 -0400 120)             ports.push_back(i);
31f1e5aed8 (SaishMalluri 2022-10-27 23:01:41 -0400 121)         }
31f1e5aed8 (SaishMalluri 2022-10-27 23:01:41 -0400 122)     }
31f1e5aed8 (SaishMalluri 2022-10-27 23:01:41 -0400 123) 
31f1e5aed8 (SaishMalluri 2022-10-27 23:01:41 -0400 124)     //Scanning specified ports
31f1e5aed8 (SaishMalluri 2022-10-27 23:01:41 -0400 125)     else
41a371f6c6 (SaishMalluri 2022-10-13 01:53:17 -0400 126)     {
31f1e5aed8 (SaishMalluri 2022-10-27 23:01:41 -0400 127)         cout << "Please enter the ports that you would like to be scanned: " << endl;
31f1e5aed8 (SaishMalluri 2022-10-27 23:01:41 -0400 128) 
31f1e5aed8 (SaishMalluri 2022-10-27 23:01:41 -0400 129)         //Getting all the ports that you want to scan
31f1e5aed8 (SaishMalluri 2022-10-27 23:01:41 -0400 130)         while(true)
41a371f6c6 (SaishMalluri 2022-10-13 01:53:17 -0400 131)         {
31f1e5aed8 (SaishMalluri 2022-10-27 23:01:41 -0400 132)             if(!(cin >> port))
31f1e5aed8 (SaishMalluri 2022-10-27 23:01:41 -0400 133)             {
31f1e5aed8 (SaishMalluri 2022-10-27 23:01:41 -0400 134)                 break;
31f1e5aed8 (SaishMalluri 2022-10-27 23:01:41 -0400 135)             }
31f1e5aed8 (SaishMalluri 2022-10-27 23:01:41 -0400 136)             ports.push_back(port);
41a371f6c6 (SaishMalluri 2022-10-13 01:53:17 -0400 137)         }
41a371f6c6 (SaishMalluri 2022-10-13 01:53:17 -0400 138)     }
31f1e5aed8 (SaishMalluri 2022-10-27 23:01:41 -0400 139) 
f28eaddf3b (SaishMalluri 2022-10-13 17:29:04 -0400 140)     scan(address,ports);
31f1e5aed8 (SaishMalluri 2022-10-27 23:01:41 -0400 141)    
f28eaddf3b (SaishMalluri 2022-10-13 17:29:04 -0400 142) 
41a371f6c6 (SaishMalluri 2022-10-13 01:53:17 -0400 143)     return 0;
41a371f6c6 (SaishMalluri 2022-10-13 01:53:17 -0400 144) }
31f1e5aed8 (SaishMalluri 2022-10-27 23:01:41 -0400 145) 