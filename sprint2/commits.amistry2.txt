8cb4f10668 (ankitm28 2022-10-27 20:09:39 -0400  1) /* port_scanner.cpp
8cb4f10668 (ankitm28 2022-10-27 20:09:39 -0400  2)  * Ankit Mistry
8cb4f10668 (ankitm28 2022-10-27 20:09:39 -0400  3)  * Last Updated October 27, 2022 08:08 PM
8cb4f10668 (ankitm28 2022-10-27 20:09:39 -0400  4)  * Originally created by Mason Hyman, modified by me.
8cb4f10668 (ankitm28 2022-10-27 20:09:39 -0400  5)  * 
8cb4f10668 (ankitm28 2022-10-27 20:09:39 -0400  6)  * Scans for open ports on a given IP address or web address. Works on both stdin and file read.
8cb4f10668 (ankitm28 2022-10-27 20:09:39 -0400  7) */
8cb4f10668 (ankitm28 2022-10-27 20:09:39 -0400  8) 
8cb4f10668 (ankitm28 2022-10-27 20:09:39 -0400  9) #include <iostream>
8cb4f10668 (ankitm28 2022-10-27 20:09:39 -0400 10) #include <fstream>
8cb4f10668 (ankitm28 2022-10-27 20:09:39 -0400 11) #include <list>
8cb4f10668 (ankitm28 2022-10-27 20:09:39 -0400 12) #include <vector>
8cb4f10668 (ankitm28 2022-10-27 20:09:39 -0400 13) #include <thread>
8cb4f10668 (ankitm28 2022-10-27 20:09:39 -0400 14) #include <SFML/Network.hpp>
8cb4f10668 (ankitm28 2022-10-27 20:09:39 -0400 15) 
8cb4f10668 (ankitm28 2022-10-27 20:09:39 -0400 16) using namespace std;
8cb4f10668 (ankitm28 2022-10-27 20:09:39 -0400 17) 
8cb4f10668 (ankitm28 2022-10-27 20:09:39 -0400 18) void print_usage() {
8cb4f10668 (ankitm28 2022-10-27 20:09:39 -0400 19) 	cerr <<  "Usage: spvs [Options] {target specification}" << endl
8cb4f10668 (ankitm28 2022-10-27 20:09:39 -0400 20) 		  << "TARGET SPECIFICATION:" << endl
8cb4f10668 (ankitm28 2022-10-27 20:09:39 -0400 21) 		  << "    -f <input file name>: Input from list of hosts." << endl;
8cb4f10668 (ankitm28 2022-10-27 20:09:39 -0400 22) }
8cb4f10668 (ankitm28 2022-10-27 20:09:39 -0400 23) 
8cb4f10668 (ankitm28 2022-10-27 20:09:39 -0400 24) static bool port_is_open(const string& address, int port) {
8cb4f10668 (ankitm28 2022-10-27 20:09:39 -0400 25) 	return (sf::TcpSocket().connect(sf::IpAddress::resolve(address).value(), port, sf::milliseconds(100)) == sf::Socket::Status::Done);
8cb4f10668 (ankitm28 2022-10-27 20:09:39 -0400 26) }
8cb4f10668 (ankitm28 2022-10-27 20:09:39 -0400 27) 
8cb4f10668 (ankitm28 2022-10-27 20:09:39 -0400 28) void threaded_port_is_open(const string& address, int port, vector<bool>& status) {
8cb4f10668 (ankitm28 2022-10-27 20:09:39 -0400 29) 	cout << address << endl;	
8cb4f10668 (ankitm28 2022-10-27 20:09:39 -0400 30) 	if(sf::TcpSocket().connect(sf::IpAddress::resolve(address).value(), port) == sf::Socket::Status::Done) {
8cb4f10668 (ankitm28 2022-10-27 20:09:39 -0400 31) 		status.at(port) = 1;
8cb4f10668 (ankitm28 2022-10-27 20:09:39 -0400 32) 	}
8cb4f10668 (ankitm28 2022-10-27 20:09:39 -0400 33) }
8cb4f10668 (ankitm28 2022-10-27 20:09:39 -0400 34) 
8cb4f10668 (ankitm28 2022-10-27 20:09:39 -0400 35) void port_scan(const string& address, int ports) {
8cb4f10668 (ankitm28 2022-10-27 20:09:39 -0400 36) 	vector <bool> open_ports(ports+1, false);
8cb4f10668 (ankitm28 2022-10-27 20:09:39 -0400 37) 	vector <thread *> threads;
8cb4f10668 (ankitm28 2022-10-27 20:09:39 -0400 38) 
8cb4f10668 (ankitm28 2022-10-27 20:09:39 -0400 39) 	bool host_online = false;
8cb4f10668 (ankitm28 2022-10-27 20:09:39 -0400 40) 	
8cb4f10668 (ankitm28 2022-10-27 20:09:39 -0400 41) 	for (int i = 1; i <= ports; i++) {
8cb4f10668 (ankitm28 2022-10-27 20:09:39 -0400 42) 		if (port_is_open(address, i)) {
8cb4f10668 (ankitm28 2022-10-27 20:09:39 -0400 43) 			host_online = true;
8cb4f10668 (ankitm28 2022-10-27 20:09:39 -0400 44) 			open_ports.at(i) = true;
8cb4f10668 (ankitm28 2022-10-27 20:09:39 -0400 45) 			cout << "PORT " << i << " IS OPEN\n";
8cb4f10668 (ankitm28 2022-10-27 20:09:39 -0400 46) 		} 	
8cb4f10668 (ankitm28 2022-10-27 20:09:39 -0400 47) 	}
8cb4f10668 (ankitm28 2022-10-27 20:09:39 -0400 48) 
8cb4f10668 (ankitm28 2022-10-27 20:09:39 -0400 49) 	if (host_online) {
8cb4f10668 (ankitm28 2022-10-27 20:09:39 -0400 50) 		cout << address << " is ONLINE with open ports: " << endl;
8cb4f10668 (ankitm28 2022-10-27 20:09:39 -0400 51) 		for (int i = 1; i < open_ports.size(); i++) {
8cb4f10668 (ankitm28 2022-10-27 20:09:39 -0400 52) 			if (open_ports.at(i)) cout << "   Port " << i << " is open" << endl;
8cb4f10668 (ankitm28 2022-10-27 20:09:39 -0400 53) 		}
8cb4f10668 (ankitm28 2022-10-27 20:09:39 -0400 54)      	cout << endl;
8cb4f10668 (ankitm28 2022-10-27 20:09:39 -0400 55) 	} else {
8cb4f10668 (ankitm28 2022-10-27 20:09:39 -0400 56) 		cout << address << " is OFFLINE." << endl;
8cb4f10668 (ankitm28 2022-10-27 20:09:39 -0400 57) 	}
8cb4f10668 (ankitm28 2022-10-27 20:09:39 -0400 58) }
8cb4f10668 (ankitm28 2022-10-27 20:09:39 -0400 59) 
8cb4f10668 (ankitm28 2022-10-27 20:09:39 -0400 60) int main(int argc, char ** argv) {
8cb4f10668 (ankitm28 2022-10-27 20:09:39 -0400 61) 		
8cb4f10668 (ankitm28 2022-10-27 20:09:39 -0400 62) 	list<string> hosts;
8cb4f10668 (ankitm28 2022-10-27 20:09:39 -0400 63) 	list<string>::iterator lit;
8cb4f10668 (ankitm28 2022-10-27 20:09:39 -0400 64)    string host;
8cb4f10668 (ankitm28 2022-10-27 20:09:39 -0400 65)    ifstream file;
8cb4f10668 (ankitm28 2022-10-27 20:09:39 -0400 66) 
8cb4f10668 (ankitm28 2022-10-27 20:09:39 -0400 67) 	/* PARSE USER COMMANDS */
8cb4f10668 (ankitm28 2022-10-27 20:09:39 -0400 68) 	if (argc == 1) { print_usage(); return 1; }	
8cb4f10668 (ankitm28 2022-10-27 20:09:39 -0400 69) 	else if (argc == 2) {
8cb4f10668 (ankitm28 2022-10-27 20:09:39 -0400 70) 		/* If only two arguments, second arg must be a hostname */
8cb4f10668 (ankitm28 2022-10-27 20:09:39 -0400 71) 		hosts.push_back(argv[1]);
8cb4f10668 (ankitm28 2022-10-27 20:09:39 -0400 72) 	}
8cb4f10668 (ankitm28 2022-10-27 20:09:39 -0400 73) 	else if (argc == 3) {
8cb4f10668 (ankitm28 2022-10-27 20:09:39 -0400 74) 		if (string(argv[1]) == "-f") {
8cb4f10668 (ankitm28 2022-10-27 20:09:39 -0400 75) 			/* READ HOSTS FROM FILE */
8cb4f10668 (ankitm28 2022-10-27 20:09:39 -0400 76)          file.open(argv[2]);
8cb4f10668 (ankitm28 2022-10-27 20:09:39 -0400 77) 			if(!file.is_open()) cerr << "Could not open file " << argv[1] << endl;
8cb4f10668 (ankitm28 2022-10-27 20:09:39 -0400 78) 				
8cb4f10668 (ankitm28 2022-10-27 20:09:39 -0400 79) 			while (file >> host) hosts.push_back(host); 
8cb4f10668 (ankitm28 2022-10-27 20:09:39 -0400 80) 			file.close();
8cb4f10668 (ankitm28 2022-10-27 20:09:39 -0400 81) 			cout << "Successfully read in " << hosts.size() << " hosts" << endl;
8cb4f10668 (ankitm28 2022-10-27 20:09:39 -0400 82) 		}
8cb4f10668 (ankitm28 2022-10-27 20:09:39 -0400 83) 	} 
8cb4f10668 (ankitm28 2022-10-27 20:09:39 -0400 84) 
8cb4f10668 (ankitm28 2022-10-27 20:09:39 -0400 85) 	/* PERFORM BASIC DISCOVERY */
8cb4f10668 (ankitm28 2022-10-27 20:09:39 -0400 86) 	/* Essentially determining if host is online */
8cb4f10668 (ankitm28 2022-10-27 20:09:39 -0400 87) 	for (lit = hosts.begin(); lit != hosts.end(); lit++) {
8cb4f10668 (ankitm28 2022-10-27 20:09:39 -0400 88) 		port_scan(*lit, 65535);
8cb4f10668 (ankitm28 2022-10-27 20:09:39 -0400 89)    }
8cb4f10668 (ankitm28 2022-10-27 20:09:39 -0400 90) 
8cb4f10668 (ankitm28 2022-10-27 20:09:39 -0400 91) 	return 0;
8cb4f10668 (ankitm28 2022-10-27 20:09:39 -0400 92) } 
